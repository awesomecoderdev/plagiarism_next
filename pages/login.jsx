import React, { Fragment, useContext, useEffect, useState } from 'react';
import api from "../lib/api"
import { SupportIcon } from "@heroicons/react/solid"
import AuthContext from '../context/AuthContext';
import Cookies from 'js-cookie';
import Head from 'next/head';
import { useRouter } from "next/router";


const Login = () => {
    const router = useRouter();
    const {name,setName} = useContext(AuthContext);
    const [inputs, setInputs] = useState({});
    const [resErr, setRresErr] = useState({});
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        // console.log("errors",resErr);
    }, [resErr]);

    const handleChange = (event) => {
      const name = event.target.name;
      const value = event.target.value;
      setInputs(values => ({...values, [name]: value}))
    }

    const handleSubmit = (event) => {
        event.preventDefault();
        setLoading(true);
        api.post("user/login",inputs)
        .then(function(response){
            setLoading(false);
            // console.log(response);
            if(response.data.success){
                setRresErr({})
                Cookies.set("next_session",btoa(response.data.token),{ expires: 1 })
                router.push("/dashboard");
            }else{
                if(response.data.error){
                    setRresErr(response.data.error)
                }else{
                    setRresErr({
                        password : "Your email and password do not match."
                    })
                }
            }
        })
        .catch(function(error){
            setLoading(false);
            setValidCredentials(false)
            console.log(error);
        });

        // api.get("csrf").then(res => {
        //     api.post("user/login",inputs)
        //     .then(function(response){
        //         setLoading(false);
        //         console.log(response);
        //         if(response.data.success){
        //             setValidCredentials(true)
        //             setName(response.data.token)
        //         }else{
        //             setValidCredentials(false)
        //         }
        //     })
        //     .catch(function(error){
        //         setLoading(false);
        //         setValidCredentials(false)

        //         console.log(error);
        //     });
        // })
    }

    return (
        <Fragment>
            <Head>
                <title>Login | Plagiarism</title>
                <meta name="description" content="Generated by create next app" />
            </Head>
            <div className="relative w-full h-full min-h-screen  overflow-hidden flex  justify-center items-center bg-no-repeat bg-left-top bg-cover "
            // style={{ background: `url("/city.png")` }}
            >
                <div className="p-4 w-full max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700">
                    <form className="" onSubmit={(e) => {handleSubmit(e)}}>
                        <h5 className="text-xl font-medium text-gray-900 dark:text-white my-3">Sign in to our platform</h5>
                        <div className="p-0">
                            <label htmlFor="email" className="block my-1 text-sm font-medium text-gray-900 dark:text-gray-300">Your email</label>
                            <input
                                type="text"
                                value={inputs.email || ""}
                                onChange={(e)=> {handleChange(e)}}
                                name="email" id="email"
                                className={`${resErr.email ? "border-red-500" : "border-green-300" } bg-gray-50 border focus-visible:outline-none focus-visible:border-primary-400 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white`}
                                placeholder="name@company.com"
                                required="" />
                                <p className={`${resErr.email ? "opacity-100" : "opacity-0" } text-xs font-medium py-1 px-1 text-red-500`}>
                                    {resErr.email ? resErr.email : "MD Ibrahim Kholil"}
                                </p>
                        </div>
                        <div className="p-0">
                            <label htmlFor="password" className="block my-1 text-sm font-medium text-gray-900 dark:text-gray-300">Your password</label>
                            <input
                                type="password"
                                value={inputs.password || ""}
                                onChange={(e)=> {handleChange(e)}}
                                name="password" id="password"
                                className={`${resErr.password ? "border-red-500" : "border-green-300" } bg-gray-50 border focus-visible:outline-none focus-visible:border-primary-400 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white`}
                                placeholder="••••••••"
                                required=""
                            />
                            <p className={`${resErr.password ? "opacity-100" : "opacity-0" } text-xs font-medium py-1 px-1 text-red-500`} >
                                {resErr.password ? resErr.password : "MD Ibrahim Kholil"}
                            </p>
                        </div>
                        <div className="flex items-start my-2">
                            <div className="flex items-start">
                                <div className="flex items-center h-5">
                                    <input id="remember" type="checkbox" value="" className="focus-visible:outline-none w-4 h-4 bg-gray-50 rounded border border-gray-300 focus:ring-3         focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800" required="" />
                                </div>
                                <label htmlFor="remember" className="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                    Remember me
                                </label>
                            </div>
                            <a href="#" className="focus-visible:outline-none ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500">
                                Lost Password?
                            </a>
                        </div>
                        <button type="submit" className="my-4 focus-visible:outline-none w-full flex justify-center items-center text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300        font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                            {loading ?
                                <>
                                    <svg className="animate-spin mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    Loading ...
                                </>
                            :
                                <>Login to your account</>
                            }
                        </button>
                        <div className="text-sm flex justify-between items-center font-medium text-gray-500 dark:text-gray-300">
                            <span>
                            Not registered?
                            </span>
                            <a href="#" className="focus-visible:outline-none text-blue-700 hover:underline dark:text-blue-500">
                                Create account
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </Fragment>

    );
}

export default Login;
